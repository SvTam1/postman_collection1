{
	"info": {
		"_postman_id": "e47869d5-948d-4a3d-9525-5324fc063e5e",
		"name": "swapi test collection",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "24074407"
	},
	"item": [
		{
			"name": "swapi.dev/api/",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1. Correct response format JSON",
							"pm.test(\"Correct response format JSON\", function(){",
							"    pm.response.to.have.jsonBody()",
							"});",
							"//2.. We have all the declared fields in the response",
							"pm.test(\"Check that we have all declared fileds\", function(){",
							"    const jsonData = pm.response.json();",
							"    ",
							"    pm.expect(jsonData).to.have.property(\"people\");",
							"    pm.expect(jsonData).to.have.property(\"planets\");",
							"    pm.expect(jsonData).to.have.property(\"films\");",
							"    pm.expect(jsonData).to.have.property(\"species\");",
							"    pm.expect(jsonData).to.have.property(\"vehicles\");",
							"    pm.expect(jsonData).to.have.property(\"starships\");",
							"    ",
							"});",
							"//3. Field value is not null",
							"pm.test(\"Check if value is not null\", function(){",
							"  var jsonData = pm.response.json();",
							"  pm.expect(jsonData.people).not.equal(null);",
							"  pm.expect(jsonData.planets).not.equal(null);",
							"  pm.expect(jsonData.films).not.equal(null);",
							"  pm.expect(jsonData.species).not.equal(null);",
							"  pm.expect(jsonData.vehicles).not.equal(null);",
							"  pm.expect(jsonData.starships).not.equal(null);",
							"});",
							"",
							"//4. Check if value is not empty",
							"pm.test(\"Check if value is not empty\", function(){",
							"  var jsonData = pm.response.json();",
							"  pm.expect(jsonData.people).not.equal(\"\");",
							"  pm.expect(jsonData.planets).not.equal(\"\");",
							"  pm.expect(jsonData.films).not.equal(\"\");",
							"  pm.expect(jsonData.species).not.equal(\"\");",
							"  pm.expect(jsonData.vehicles).not.equal(\"\");",
							"  pm.expect(jsonData.starships).not.equal(\"\");",
							"});",
							"",
							"//5. Check if field corresponds to a specific value",
							"pm.test(\"Check if field corresponds to a specific value\", function(){",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.people).to.equal(\"https://swapi.dev/api/people/\");",
							"    pm.expect(jsonData.planets).to.equal(\"https://swapi.dev/api/planets/\");",
							"    pm.expect(jsonData.films).to.equal(\"https://swapi.dev/api/films/\");",
							"    pm.expect(jsonData.species).to.equal(\"https://swapi.dev/api/species/\");",
							"    pm.expect(jsonData.vehicles).to.equal(\"https://swapi.dev/api/vehicles/\");",
							"    pm.expect(jsonData.starships).to.equal(\"https://swapi.dev/api/starships/\");",
							"    ",
							"});",
							"",
							"//6. Status code is 200",
							"pm.test (\"Status code is 200\", function(){",
							"    pm.response.to.have.status(200);",
							"});",
							"//7. Status message is ok",
							"pm.test(\"Status message is ok\", function(){",
							"    pm.response.to.have.status (\"OK\");",
							"});",
							"",
							"//8. Response time is less than 700ms",
							"pm.test(\"Response time is less than 100ms\", function(){",
							"    pm.expect(pm.response.responseTime).to.be.below(700);",
							"});",
							"",
							"//9. There is a specific header in the respose",
							"pm.test(\"There is a specific header in the respose\", function(){",
							"pm.response.to.have.header(\"Content-Type\")",
							"});",
							"",
							"//10. The response has a specific header with a specific value",
							"pm.test(\"The response has a specific header with a specific value\", function(){",
							"    pm.response.to.be.header(\"Content-Type\",\"application/json\")",
							"});",
							"//11. Cookie exist",
							"pm.test(\"Cookie exist\", function(){",
							"    pm.cookies.has(\"\")",
							"});",
							"",
							"//12. Cookie has value",
							"pm.test(\"Cookie has value\", function(){",
							"    try{",
							"        var MY_COOKIE = pm.cookies.get(\"\");",
							"        console.log(MY_COOKIE);",
							"    } catch(e) {",
							"        console.log(\"SOME PROBLEM WITH COOKIE -->\" + e)",
							"    }",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "swapi.dev/api/",
					"host": [
						"swapi",
						"dev"
					],
					"path": [
						"api",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Checking schema",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var data = JSON.parse(responseBody);\r",
							"\r",
							"var schema = {\r",
							"    //specify the type of object\r",
							"    \"type\" : \"object\",\r",
							"    //specify required properties\r",
							"    \"required\": [\"people\",\"planets\",\"films\",\"species\",\"vehicles\",\"starships\"],\r",
							"    //describe the properties\r",
							"    \"properties\":{\r",
							"        \"people\": {\"type\": \"string\"},\r",
							"        \"planets\": {\"type\": \"string\"},\r",
							"        \"films\": {\"type\": \"string\"},\r",
							"        \"species\": {\"type\": \"string\"},\r",
							"        \"vehicles\": {\"type\": \"string\"},\r",
							"        \"starships\": {\"type\": \"string\"}\r",
							"    }\r",
							"};\r",
							"\r",
							"pm.test ('Body is correct', function(){\r",
							"   pm.expect(tv4.validate(data, schema)).to.be.true\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "swapi.dev/api/",
					"host": [
						"swapi",
						"dev"
					],
					"path": [
						"api",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "New Request",
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "https://www.toptal.com/developers/postbin/1666812455536-3481893299613",
					"protocol": "https",
					"host": [
						"www",
						"toptal",
						"com"
					],
					"path": [
						"developers",
						"postbin",
						"1666812455536-3481893299613"
					]
				}
			},
			"response": []
		}
	]
}